<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_1791009_event_ma.EventUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>EventUtils</name>
        <script><![CDATA[var EventUtils = Class.create();
EventUtils.prototype = {
  initialize: function() {},

  // 1. Fetch event details by event ID
  getEventDetails: function(eventId) {
    var event = new GlideRecord('x_1791009_event_ma_event_record');
    if (event.get(eventId)) {
      return {
        name: event.getValue('event_name'),
        start_date: event.getValue('start_date'),
        end_date: event.getValue('end_date'),
        location: event.getValue('location'),
        status: event.getValue('status'),
      };
    }
    return null;
  },

  // 2. Check if event is VIP
  isVIP: function(eventId) {
    var event = new GlideRecord('x_1791009_event_ma_event_record');
    if (event.get(eventId)) {
      return event.getValue('vip') == 'true'; // adjust field name if needed
    }
    return false;
  },

  // 3. Calculate remaining budget (total - spent)
  getRemainingBudget: function(eventId) {
    var budget = new GlideRecord('x_1791009_event_ma_budget');
    budget.addQuery('event_id', eventId);
    budget.query();
    if (budget.next()) {
      var total = parseFloat(budget.getValue('total_budget') || 0);
      var spent = parseFloat(budget.getValue('amount_spent') || 0);
      return total - spent;
    }
    return null;
  },

  // 4. Fetch tasks related to the event
  getEventTasks: function(eventId) {
    var tasks = [];
    var taskGR = new GlideRecord('x_1791009_event_ma_event_task');
    taskGR.addQuery('event_id', eventId);
    taskGR.query();
    while (taskGR.next()) {
      tasks.push({
        name: taskGR.getValue('task_name'),
        due_date: taskGR.getValue('due_date'),
        status: taskGR.getDisplayValue('status'),
        assigned_to: taskGR.getDisplayValue('assigned_to')
      });
    }
    return tasks;
  },

  // 5. Fetch attendees for the event
  getEventAttendees: function(eventId) {
    var attendees = [];
    var gr = new GlideRecord('x_1791009_event_ma_attendee');
    gr.addQuery('event_id', eventId);
    gr.query();
    while (gr.next()) {
      attendees.push({
        name: gr.getValue('first_name') + ' ' + gr.getValue('last_name'),
        email: gr.getValue('email'),
        contact: gr.getValue('contact_number')
      });
    }
    return attendees;
  },

  // 6. Fetch vendors for the event
  getEventVendors: function(eventId) {
    var vendors = [];
    var gr = new GlideRecord('x_1791009_event_ma_vendor');
    gr.addQuery('event_id', eventId);
    gr.query();
    while (gr.next()) {
      vendors.push({
        name: gr.getValue('vendor_name'),
        service: gr.getValue('contact_person'),
		email: gr.getValue('email'),
        contact: gr.getValue('u_contact_number')
      });
    }
    return vendors;
  },

  // 7. Fetch budget details
  getEventBudgetDetails: function(eventId) {
    var gr = new GlideRecord('x_1791009_event_ma_budget');
    gr.addQuery('event_id', eventId);
    gr.query();
    if (gr.next()) {
      return {
        total: gr.getValue('total_budget'),
        spent: gr.getValue('amount_spent'),
        remaining: parseFloat(gr.getValue('total_budget')) - parseFloat(gr.getValue('amount_spent'))
      };
    }
    return null;
  },

  // 8. Fetch feedback
  getEventFeedback: function(eventId) {
    var feedbackList = [];
    var gr = new GlideRecord('x_1791009_event_ma_feedback');
    gr.addQuery('event_id', eventId);
    gr.query();
    while (gr.next()) {
      feedbackList.push({
        attendee: gr.getDisplayValue('attendee_id'),
        rating: gr.getValue('rating'),
        comments: gr.getValue('comments')
      });
    }
    return feedbackList;
  },

  type: 'EventUtils'
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-08-04 19:22:52</sys_created_on>
        <sys_id>8808679fc30f2210f23870edd40131a0</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>EventUtils</sys_name>
        <sys_package display_value="Event Management &amp;amp; Planning System" source="x_1791009_event_ma">5cf815dbc3432210f23870edd4013162</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Event Management &amp;amp; Planning System">5cf815dbc3432210f23870edd4013162</sys_scope>
        <sys_update_name>sys_script_include_8808679fc30f2210f23870edd40131a0</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-08-04 19:33:10</sys_updated_on>
    </sys_script_include>
</record_update>
